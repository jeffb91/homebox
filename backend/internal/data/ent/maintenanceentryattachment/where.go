// Code generated by ent, DO NOT EDIT.

package maintenanceentryattachment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldID, id))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldFilename, v))
}

// Filepath applies equality check predicate on the "filepath" field. It's identical to FilepathEQ.
func Filepath(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldFilepath, v))
}

// UploadedAt applies equality check predicate on the "uploaded_at" field. It's identical to UploadedAtEQ.
func UploadedAt(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldUploadedAt, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContainsFold(FieldFilename, v))
}

// FilepathEQ applies the EQ predicate on the "filepath" field.
func FilepathEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldFilepath, v))
}

// FilepathNEQ applies the NEQ predicate on the "filepath" field.
func FilepathNEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldFilepath, v))
}

// FilepathIn applies the In predicate on the "filepath" field.
func FilepathIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldFilepath, vs...))
}

// FilepathNotIn applies the NotIn predicate on the "filepath" field.
func FilepathNotIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldFilepath, vs...))
}

// FilepathGT applies the GT predicate on the "filepath" field.
func FilepathGT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldFilepath, v))
}

// FilepathGTE applies the GTE predicate on the "filepath" field.
func FilepathGTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldFilepath, v))
}

// FilepathLT applies the LT predicate on the "filepath" field.
func FilepathLT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldFilepath, v))
}

// FilepathLTE applies the LTE predicate on the "filepath" field.
func FilepathLTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldFilepath, v))
}

// FilepathContains applies the Contains predicate on the "filepath" field.
func FilepathContains(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContains(FieldFilepath, v))
}

// FilepathHasPrefix applies the HasPrefix predicate on the "filepath" field.
func FilepathHasPrefix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasPrefix(FieldFilepath, v))
}

// FilepathHasSuffix applies the HasSuffix predicate on the "filepath" field.
func FilepathHasSuffix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasSuffix(FieldFilepath, v))
}

// FilepathEqualFold applies the EqualFold predicate on the "filepath" field.
func FilepathEqualFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEqualFold(FieldFilepath, v))
}

// FilepathContainsFold applies the ContainsFold predicate on the "filepath" field.
func FilepathContainsFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContainsFold(FieldFilepath, v))
}

// UploadedAtEQ applies the EQ predicate on the "uploaded_at" field.
func UploadedAtEQ(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldUploadedAt, v))
}

// UploadedAtNEQ applies the NEQ predicate on the "uploaded_at" field.
func UploadedAtNEQ(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldUploadedAt, v))
}

// UploadedAtIn applies the In predicate on the "uploaded_at" field.
func UploadedAtIn(vs ...time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldUploadedAt, vs...))
}

// UploadedAtNotIn applies the NotIn predicate on the "uploaded_at" field.
func UploadedAtNotIn(vs ...time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldUploadedAt, vs...))
}

// UploadedAtGT applies the GT predicate on the "uploaded_at" field.
func UploadedAtGT(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldUploadedAt, v))
}

// UploadedAtGTE applies the GTE predicate on the "uploaded_at" field.
func UploadedAtGTE(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldUploadedAt, v))
}

// UploadedAtLT applies the LT predicate on the "uploaded_at" field.
func UploadedAtLT(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldUploadedAt, v))
}

// UploadedAtLTE applies the LTE predicate on the "uploaded_at" field.
func UploadedAtLTE(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldUploadedAt, v))
}

// HasEntry applies the HasEdge predicate on the "entry" edge.
func HasEntry() predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EntryTable, EntryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntryWith applies the HasEdge predicate on the "entry" edge with a given conditions (other predicates).
func HasEntryWith(preds ...predicate.MaintenanceEntry) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(func(s *sql.Selector) {
		step := newEntryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MaintenanceEntryAttachment) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MaintenanceEntryAttachment) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MaintenanceEntryAttachment) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.NotPredicates(p))
}
