// Code generated by ent, DO NOT EDIT.

package maintenanceentryattachment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldID, id))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldFilename, v))
}

// Filepath applies equality check predicate on the "filepath" field. It's identical to FilepathEQ.
func Filepath(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldFilepath, v))
}

// ContentType applies equality check predicate on the "content_type" field. It's identical to ContentTypeEQ.
func ContentType(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldContentType, v))
}

// UploadedAt applies equality check predicate on the "uploaded_at" field. It's identical to UploadedAtEQ.
func UploadedAt(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldUploadedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldUpdatedAt, v))
}

// MaintenanceEntryID applies equality check predicate on the "maintenance_entry_id" field. It's identical to MaintenanceEntryIDEQ.
func MaintenanceEntryID(v uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldMaintenanceEntryID, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContainsFold(FieldFilename, v))
}

// FilepathEQ applies the EQ predicate on the "filepath" field.
func FilepathEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldFilepath, v))
}

// FilepathNEQ applies the NEQ predicate on the "filepath" field.
func FilepathNEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldFilepath, v))
}

// FilepathIn applies the In predicate on the "filepath" field.
func FilepathIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldFilepath, vs...))
}

// FilepathNotIn applies the NotIn predicate on the "filepath" field.
func FilepathNotIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldFilepath, vs...))
}

// FilepathGT applies the GT predicate on the "filepath" field.
func FilepathGT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldFilepath, v))
}

// FilepathGTE applies the GTE predicate on the "filepath" field.
func FilepathGTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldFilepath, v))
}

// FilepathLT applies the LT predicate on the "filepath" field.
func FilepathLT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldFilepath, v))
}

// FilepathLTE applies the LTE predicate on the "filepath" field.
func FilepathLTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldFilepath, v))
}

// FilepathContains applies the Contains predicate on the "filepath" field.
func FilepathContains(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContains(FieldFilepath, v))
}

// FilepathHasPrefix applies the HasPrefix predicate on the "filepath" field.
func FilepathHasPrefix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasPrefix(FieldFilepath, v))
}

// FilepathHasSuffix applies the HasSuffix predicate on the "filepath" field.
func FilepathHasSuffix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasSuffix(FieldFilepath, v))
}

// FilepathEqualFold applies the EqualFold predicate on the "filepath" field.
func FilepathEqualFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEqualFold(FieldFilepath, v))
}

// FilepathContainsFold applies the ContainsFold predicate on the "filepath" field.
func FilepathContainsFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContainsFold(FieldFilepath, v))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldContentType, vs...))
}

// ContentTypeGT applies the GT predicate on the "content_type" field.
func ContentTypeGT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldContentType, v))
}

// ContentTypeGTE applies the GTE predicate on the "content_type" field.
func ContentTypeGTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldContentType, v))
}

// ContentTypeLT applies the LT predicate on the "content_type" field.
func ContentTypeLT(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldContentType, v))
}

// ContentTypeLTE applies the LTE predicate on the "content_type" field.
func ContentTypeLTE(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldContentType, v))
}

// ContentTypeContains applies the Contains predicate on the "content_type" field.
func ContentTypeContains(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContains(FieldContentType, v))
}

// ContentTypeHasPrefix applies the HasPrefix predicate on the "content_type" field.
func ContentTypeHasPrefix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasPrefix(FieldContentType, v))
}

// ContentTypeHasSuffix applies the HasSuffix predicate on the "content_type" field.
func ContentTypeHasSuffix(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldHasSuffix(FieldContentType, v))
}

// ContentTypeIsNil applies the IsNil predicate on the "content_type" field.
func ContentTypeIsNil() predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIsNull(FieldContentType))
}

// ContentTypeNotNil applies the NotNil predicate on the "content_type" field.
func ContentTypeNotNil() predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotNull(FieldContentType))
}

// ContentTypeEqualFold applies the EqualFold predicate on the "content_type" field.
func ContentTypeEqualFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEqualFold(FieldContentType, v))
}

// ContentTypeContainsFold applies the ContainsFold predicate on the "content_type" field.
func ContentTypeContainsFold(v string) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldContainsFold(FieldContentType, v))
}

// UploadedAtEQ applies the EQ predicate on the "uploaded_at" field.
func UploadedAtEQ(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldUploadedAt, v))
}

// UploadedAtNEQ applies the NEQ predicate on the "uploaded_at" field.
func UploadedAtNEQ(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldUploadedAt, v))
}

// UploadedAtIn applies the In predicate on the "uploaded_at" field.
func UploadedAtIn(vs ...time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldUploadedAt, vs...))
}

// UploadedAtNotIn applies the NotIn predicate on the "uploaded_at" field.
func UploadedAtNotIn(vs ...time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldUploadedAt, vs...))
}

// UploadedAtGT applies the GT predicate on the "uploaded_at" field.
func UploadedAtGT(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldUploadedAt, v))
}

// UploadedAtGTE applies the GTE predicate on the "uploaded_at" field.
func UploadedAtGTE(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldUploadedAt, v))
}

// UploadedAtLT applies the LT predicate on the "uploaded_at" field.
func UploadedAtLT(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldUploadedAt, v))
}

// UploadedAtLTE applies the LTE predicate on the "uploaded_at" field.
func UploadedAtLTE(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldUploadedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldLTE(FieldUpdatedAt, v))
}

// MaintenanceEntryIDEQ applies the EQ predicate on the "maintenance_entry_id" field.
func MaintenanceEntryIDEQ(v uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldEQ(FieldMaintenanceEntryID, v))
}

// MaintenanceEntryIDNEQ applies the NEQ predicate on the "maintenance_entry_id" field.
func MaintenanceEntryIDNEQ(v uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNEQ(FieldMaintenanceEntryID, v))
}

// MaintenanceEntryIDIn applies the In predicate on the "maintenance_entry_id" field.
func MaintenanceEntryIDIn(vs ...uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldIn(FieldMaintenanceEntryID, vs...))
}

// MaintenanceEntryIDNotIn applies the NotIn predicate on the "maintenance_entry_id" field.
func MaintenanceEntryIDNotIn(vs ...uuid.UUID) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.FieldNotIn(FieldMaintenanceEntryID, vs...))
}

// HasEntry applies the HasEdge predicate on the "entry" edge.
func HasEntry() predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EntryTable, EntryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntryWith applies the HasEdge predicate on the "entry" edge with a given conditions (other predicates).
func HasEntryWith(preds ...predicate.MaintenanceEntry) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(func(s *sql.Selector) {
		step := newEntryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MaintenanceEntryAttachment) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MaintenanceEntryAttachment) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MaintenanceEntryAttachment) predicate.MaintenanceEntryAttachment {
	return predicate.MaintenanceEntryAttachment(sql.NotPredicates(p))
}
