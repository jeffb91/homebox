// Code generated by ent, DO NOT EDIT.

package maintenanceentryattachment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the maintenanceentryattachment type in the database.
	Label = "maintenance_entry_attachment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldFilepath holds the string denoting the filepath field in the database.
	FieldFilepath = "filepath"
	// FieldUploadedAt holds the string denoting the uploaded_at field in the database.
	FieldUploadedAt = "uploaded_at"
	// EdgeEntry holds the string denoting the entry edge name in mutations.
	EdgeEntry = "entry"
	// Table holds the table name of the maintenanceentryattachment in the database.
	Table = "maintenance_entry_attachments"
	// EntryTable is the table that holds the entry relation/edge.
	EntryTable = "maintenance_entry_attachments"
	// EntryInverseTable is the table name for the MaintenanceEntry entity.
	// It exists in this package in order to avoid circular dependency with the "maintenanceentry" package.
	EntryInverseTable = "maintenance_entries"
	// EntryColumn is the table column denoting the entry relation/edge.
	EntryColumn = "maintenance_entry_attachments"
)

// Columns holds all SQL columns for maintenanceentryattachment fields.
var Columns = []string{
	FieldID,
	FieldFilename,
	FieldFilepath,
	FieldUploadedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "maintenance_entry_attachments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"maintenance_entry_attachments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	FilenameValidator func(string) error
	// FilepathValidator is a validator for the "filepath" field. It is called by the builders before save.
	FilepathValidator func(string) error
	// DefaultUploadedAt holds the default value on creation for the "uploaded_at" field.
	DefaultUploadedAt func() time.Time
)

// OrderOption defines the ordering options for the MaintenanceEntryAttachment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByFilepath orders the results by the filepath field.
func ByFilepath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilepath, opts...).ToFunc()
}

// ByUploadedAt orders the results by the uploaded_at field.
func ByUploadedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadedAt, opts...).ToFunc()
}

// ByEntryField orders the results by entry field.
func ByEntryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntryStep(), sql.OrderByField(field, opts...))
	}
}
func newEntryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EntryTable, EntryColumn),
	)
}
