// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/maintenanceentry"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/maintenanceentryattachment"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/predicate"
)

// MaintenanceEntryAttachmentUpdate is the builder for updating MaintenanceEntryAttachment entities.
type MaintenanceEntryAttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *MaintenanceEntryAttachmentMutation
}

// Where appends a list predicates to the MaintenanceEntryAttachmentUpdate builder.
func (meau *MaintenanceEntryAttachmentUpdate) Where(ps ...predicate.MaintenanceEntryAttachment) *MaintenanceEntryAttachmentUpdate {
	meau.mutation.Where(ps...)
	return meau
}

// SetFilename sets the "filename" field.
func (meau *MaintenanceEntryAttachmentUpdate) SetFilename(s string) *MaintenanceEntryAttachmentUpdate {
	meau.mutation.SetFilename(s)
	return meau
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (meau *MaintenanceEntryAttachmentUpdate) SetNillableFilename(s *string) *MaintenanceEntryAttachmentUpdate {
	if s != nil {
		meau.SetFilename(*s)
	}
	return meau
}

// SetFilepath sets the "filepath" field.
func (meau *MaintenanceEntryAttachmentUpdate) SetFilepath(s string) *MaintenanceEntryAttachmentUpdate {
	meau.mutation.SetFilepath(s)
	return meau
}

// SetNillableFilepath sets the "filepath" field if the given value is not nil.
func (meau *MaintenanceEntryAttachmentUpdate) SetNillableFilepath(s *string) *MaintenanceEntryAttachmentUpdate {
	if s != nil {
		meau.SetFilepath(*s)
	}
	return meau
}

// SetContentType sets the "content_type" field.
func (meau *MaintenanceEntryAttachmentUpdate) SetContentType(s string) *MaintenanceEntryAttachmentUpdate {
	meau.mutation.SetContentType(s)
	return meau
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (meau *MaintenanceEntryAttachmentUpdate) SetNillableContentType(s *string) *MaintenanceEntryAttachmentUpdate {
	if s != nil {
		meau.SetContentType(*s)
	}
	return meau
}

// ClearContentType clears the value of the "content_type" field.
func (meau *MaintenanceEntryAttachmentUpdate) ClearContentType() *MaintenanceEntryAttachmentUpdate {
	meau.mutation.ClearContentType()
	return meau
}

// SetUploadedAt sets the "uploaded_at" field.
func (meau *MaintenanceEntryAttachmentUpdate) SetUploadedAt(t time.Time) *MaintenanceEntryAttachmentUpdate {
	meau.mutation.SetUploadedAt(t)
	return meau
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (meau *MaintenanceEntryAttachmentUpdate) SetNillableUploadedAt(t *time.Time) *MaintenanceEntryAttachmentUpdate {
	if t != nil {
		meau.SetUploadedAt(*t)
	}
	return meau
}

// SetUpdatedAt sets the "updated_at" field.
func (meau *MaintenanceEntryAttachmentUpdate) SetUpdatedAt(t time.Time) *MaintenanceEntryAttachmentUpdate {
	meau.mutation.SetUpdatedAt(t)
	return meau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (meau *MaintenanceEntryAttachmentUpdate) SetNillableUpdatedAt(t *time.Time) *MaintenanceEntryAttachmentUpdate {
	if t != nil {
		meau.SetUpdatedAt(*t)
	}
	return meau
}

// SetMaintenanceEntryID sets the "maintenance_entry_id" field.
func (meau *MaintenanceEntryAttachmentUpdate) SetMaintenanceEntryID(u uuid.UUID) *MaintenanceEntryAttachmentUpdate {
	meau.mutation.SetMaintenanceEntryID(u)
	return meau
}

// SetNillableMaintenanceEntryID sets the "maintenance_entry_id" field if the given value is not nil.
func (meau *MaintenanceEntryAttachmentUpdate) SetNillableMaintenanceEntryID(u *uuid.UUID) *MaintenanceEntryAttachmentUpdate {
	if u != nil {
		meau.SetMaintenanceEntryID(*u)
	}
	return meau
}

// SetEntryID sets the "entry" edge to the MaintenanceEntry entity by ID.
func (meau *MaintenanceEntryAttachmentUpdate) SetEntryID(id uuid.UUID) *MaintenanceEntryAttachmentUpdate {
	meau.mutation.SetEntryID(id)
	return meau
}

// SetEntry sets the "entry" edge to the MaintenanceEntry entity.
func (meau *MaintenanceEntryAttachmentUpdate) SetEntry(m *MaintenanceEntry) *MaintenanceEntryAttachmentUpdate {
	return meau.SetEntryID(m.ID)
}

// Mutation returns the MaintenanceEntryAttachmentMutation object of the builder.
func (meau *MaintenanceEntryAttachmentUpdate) Mutation() *MaintenanceEntryAttachmentMutation {
	return meau.mutation
}

// ClearEntry clears the "entry" edge to the MaintenanceEntry entity.
func (meau *MaintenanceEntryAttachmentUpdate) ClearEntry() *MaintenanceEntryAttachmentUpdate {
	meau.mutation.ClearEntry()
	return meau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (meau *MaintenanceEntryAttachmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, meau.sqlSave, meau.mutation, meau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (meau *MaintenanceEntryAttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := meau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (meau *MaintenanceEntryAttachmentUpdate) Exec(ctx context.Context) error {
	_, err := meau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (meau *MaintenanceEntryAttachmentUpdate) ExecX(ctx context.Context) {
	if err := meau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (meau *MaintenanceEntryAttachmentUpdate) check() error {
	if v, ok := meau.mutation.Filename(); ok {
		if err := maintenanceentryattachment.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "MaintenanceEntryAttachment.filename": %w`, err)}
		}
	}
	if v, ok := meau.mutation.Filepath(); ok {
		if err := maintenanceentryattachment.FilepathValidator(v); err != nil {
			return &ValidationError{Name: "filepath", err: fmt.Errorf(`ent: validator failed for field "MaintenanceEntryAttachment.filepath": %w`, err)}
		}
	}
	if meau.mutation.EntryCleared() && len(meau.mutation.EntryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MaintenanceEntryAttachment.entry"`)
	}
	return nil
}

func (meau *MaintenanceEntryAttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := meau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(maintenanceentryattachment.Table, maintenanceentryattachment.Columns, sqlgraph.NewFieldSpec(maintenanceentryattachment.FieldID, field.TypeUUID))
	if ps := meau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := meau.mutation.Filename(); ok {
		_spec.SetField(maintenanceentryattachment.FieldFilename, field.TypeString, value)
	}
	if value, ok := meau.mutation.Filepath(); ok {
		_spec.SetField(maintenanceentryattachment.FieldFilepath, field.TypeString, value)
	}
	if value, ok := meau.mutation.ContentType(); ok {
		_spec.SetField(maintenanceentryattachment.FieldContentType, field.TypeString, value)
	}
	if meau.mutation.ContentTypeCleared() {
		_spec.ClearField(maintenanceentryattachment.FieldContentType, field.TypeString)
	}
	if value, ok := meau.mutation.UploadedAt(); ok {
		_spec.SetField(maintenanceentryattachment.FieldUploadedAt, field.TypeTime, value)
	}
	if value, ok := meau.mutation.UpdatedAt(); ok {
		_spec.SetField(maintenanceentryattachment.FieldUpdatedAt, field.TypeTime, value)
	}
	if meau.mutation.EntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   maintenanceentryattachment.EntryTable,
			Columns: []string{maintenanceentryattachment.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintenanceentry.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := meau.mutation.EntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   maintenanceentryattachment.EntryTable,
			Columns: []string{maintenanceentryattachment.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintenanceentry.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, meau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{maintenanceentryattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	meau.mutation.done = true
	return n, nil
}

// MaintenanceEntryAttachmentUpdateOne is the builder for updating a single MaintenanceEntryAttachment entity.
type MaintenanceEntryAttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MaintenanceEntryAttachmentMutation
}

// SetFilename sets the "filename" field.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetFilename(s string) *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.SetFilename(s)
	return meauo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetNillableFilename(s *string) *MaintenanceEntryAttachmentUpdateOne {
	if s != nil {
		meauo.SetFilename(*s)
	}
	return meauo
}

// SetFilepath sets the "filepath" field.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetFilepath(s string) *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.SetFilepath(s)
	return meauo
}

// SetNillableFilepath sets the "filepath" field if the given value is not nil.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetNillableFilepath(s *string) *MaintenanceEntryAttachmentUpdateOne {
	if s != nil {
		meauo.SetFilepath(*s)
	}
	return meauo
}

// SetContentType sets the "content_type" field.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetContentType(s string) *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.SetContentType(s)
	return meauo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetNillableContentType(s *string) *MaintenanceEntryAttachmentUpdateOne {
	if s != nil {
		meauo.SetContentType(*s)
	}
	return meauo
}

// ClearContentType clears the value of the "content_type" field.
func (meauo *MaintenanceEntryAttachmentUpdateOne) ClearContentType() *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.ClearContentType()
	return meauo
}

// SetUploadedAt sets the "uploaded_at" field.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetUploadedAt(t time.Time) *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.SetUploadedAt(t)
	return meauo
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetNillableUploadedAt(t *time.Time) *MaintenanceEntryAttachmentUpdateOne {
	if t != nil {
		meauo.SetUploadedAt(*t)
	}
	return meauo
}

// SetUpdatedAt sets the "updated_at" field.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetUpdatedAt(t time.Time) *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.SetUpdatedAt(t)
	return meauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetNillableUpdatedAt(t *time.Time) *MaintenanceEntryAttachmentUpdateOne {
	if t != nil {
		meauo.SetUpdatedAt(*t)
	}
	return meauo
}

// SetMaintenanceEntryID sets the "maintenance_entry_id" field.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetMaintenanceEntryID(u uuid.UUID) *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.SetMaintenanceEntryID(u)
	return meauo
}

// SetNillableMaintenanceEntryID sets the "maintenance_entry_id" field if the given value is not nil.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetNillableMaintenanceEntryID(u *uuid.UUID) *MaintenanceEntryAttachmentUpdateOne {
	if u != nil {
		meauo.SetMaintenanceEntryID(*u)
	}
	return meauo
}

// SetEntryID sets the "entry" edge to the MaintenanceEntry entity by ID.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetEntryID(id uuid.UUID) *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.SetEntryID(id)
	return meauo
}

// SetEntry sets the "entry" edge to the MaintenanceEntry entity.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SetEntry(m *MaintenanceEntry) *MaintenanceEntryAttachmentUpdateOne {
	return meauo.SetEntryID(m.ID)
}

// Mutation returns the MaintenanceEntryAttachmentMutation object of the builder.
func (meauo *MaintenanceEntryAttachmentUpdateOne) Mutation() *MaintenanceEntryAttachmentMutation {
	return meauo.mutation
}

// ClearEntry clears the "entry" edge to the MaintenanceEntry entity.
func (meauo *MaintenanceEntryAttachmentUpdateOne) ClearEntry() *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.ClearEntry()
	return meauo
}

// Where appends a list predicates to the MaintenanceEntryAttachmentUpdate builder.
func (meauo *MaintenanceEntryAttachmentUpdateOne) Where(ps ...predicate.MaintenanceEntryAttachment) *MaintenanceEntryAttachmentUpdateOne {
	meauo.mutation.Where(ps...)
	return meauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (meauo *MaintenanceEntryAttachmentUpdateOne) Select(field string, fields ...string) *MaintenanceEntryAttachmentUpdateOne {
	meauo.fields = append([]string{field}, fields...)
	return meauo
}

// Save executes the query and returns the updated MaintenanceEntryAttachment entity.
func (meauo *MaintenanceEntryAttachmentUpdateOne) Save(ctx context.Context) (*MaintenanceEntryAttachment, error) {
	return withHooks(ctx, meauo.sqlSave, meauo.mutation, meauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (meauo *MaintenanceEntryAttachmentUpdateOne) SaveX(ctx context.Context) *MaintenanceEntryAttachment {
	node, err := meauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (meauo *MaintenanceEntryAttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := meauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (meauo *MaintenanceEntryAttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := meauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (meauo *MaintenanceEntryAttachmentUpdateOne) check() error {
	if v, ok := meauo.mutation.Filename(); ok {
		if err := maintenanceentryattachment.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "MaintenanceEntryAttachment.filename": %w`, err)}
		}
	}
	if v, ok := meauo.mutation.Filepath(); ok {
		if err := maintenanceentryattachment.FilepathValidator(v); err != nil {
			return &ValidationError{Name: "filepath", err: fmt.Errorf(`ent: validator failed for field "MaintenanceEntryAttachment.filepath": %w`, err)}
		}
	}
	if meauo.mutation.EntryCleared() && len(meauo.mutation.EntryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MaintenanceEntryAttachment.entry"`)
	}
	return nil
}

func (meauo *MaintenanceEntryAttachmentUpdateOne) sqlSave(ctx context.Context) (_node *MaintenanceEntryAttachment, err error) {
	if err := meauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(maintenanceentryattachment.Table, maintenanceentryattachment.Columns, sqlgraph.NewFieldSpec(maintenanceentryattachment.FieldID, field.TypeUUID))
	id, ok := meauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MaintenanceEntryAttachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := meauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, maintenanceentryattachment.FieldID)
		for _, f := range fields {
			if !maintenanceentryattachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != maintenanceentryattachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := meauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := meauo.mutation.Filename(); ok {
		_spec.SetField(maintenanceentryattachment.FieldFilename, field.TypeString, value)
	}
	if value, ok := meauo.mutation.Filepath(); ok {
		_spec.SetField(maintenanceentryattachment.FieldFilepath, field.TypeString, value)
	}
	if value, ok := meauo.mutation.ContentType(); ok {
		_spec.SetField(maintenanceentryattachment.FieldContentType, field.TypeString, value)
	}
	if meauo.mutation.ContentTypeCleared() {
		_spec.ClearField(maintenanceentryattachment.FieldContentType, field.TypeString)
	}
	if value, ok := meauo.mutation.UploadedAt(); ok {
		_spec.SetField(maintenanceentryattachment.FieldUploadedAt, field.TypeTime, value)
	}
	if value, ok := meauo.mutation.UpdatedAt(); ok {
		_spec.SetField(maintenanceentryattachment.FieldUpdatedAt, field.TypeTime, value)
	}
	if meauo.mutation.EntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   maintenanceentryattachment.EntryTable,
			Columns: []string{maintenanceentryattachment.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintenanceentry.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := meauo.mutation.EntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   maintenanceentryattachment.EntryTable,
			Columns: []string{maintenanceentryattachment.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintenanceentry.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MaintenanceEntryAttachment{config: meauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, meauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{maintenanceentryattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	meauo.mutation.done = true
	return _node, nil
}
