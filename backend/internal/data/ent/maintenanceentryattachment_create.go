// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/maintenanceentry"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/maintenanceentryattachment"
)

// MaintenanceEntryAttachmentCreate is the builder for creating a MaintenanceEntryAttachment entity.
type MaintenanceEntryAttachmentCreate struct {
	config
	mutation *MaintenanceEntryAttachmentMutation
	hooks    []Hook
}

func (meac *MaintenanceEntryAttachmentCreate) SetMaintenanceEntryID(entryID uuid.UUID) {
	panic("unimplemented")
}

// SetFilename sets the "filename" field.
func (meac *MaintenanceEntryAttachmentCreate) SetFilename(s string) *MaintenanceEntryAttachmentCreate {
	meac.mutation.SetFilename(s)
	return meac
}

// SetFilepath sets the "filepath" field.
func (meac *MaintenanceEntryAttachmentCreate) SetFilepath(s string) *MaintenanceEntryAttachmentCreate {
	meac.mutation.SetFilepath(s)
	return meac
}

// SetUploadedAt sets the "uploaded_at" field.
func (meac *MaintenanceEntryAttachmentCreate) SetUploadedAt(t time.Time) *MaintenanceEntryAttachmentCreate {
	meac.mutation.SetUploadedAt(t)
	return meac
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (meac *MaintenanceEntryAttachmentCreate) SetNillableUploadedAt(t *time.Time) *MaintenanceEntryAttachmentCreate {
	if t != nil {
		meac.SetUploadedAt(*t)
	}
	return meac
}

// SetEntryID sets the "entry" edge to the MaintenanceEntry entity by ID.
func (meac *MaintenanceEntryAttachmentCreate) SetEntryID(id uuid.UUID) *MaintenanceEntryAttachmentCreate {
	meac.mutation.SetEntryID(id)
	return meac
}

// SetEntry sets the "entry" edge to the MaintenanceEntry entity.
func (meac *MaintenanceEntryAttachmentCreate) SetEntry(m *MaintenanceEntry) *MaintenanceEntryAttachmentCreate {
	return meac.SetEntryID(m.ID)
}

// Mutation returns the MaintenanceEntryAttachmentMutation object of the builder.
func (meac *MaintenanceEntryAttachmentCreate) Mutation() *MaintenanceEntryAttachmentMutation {
	return meac.mutation
}

// Save creates the MaintenanceEntryAttachment in the database.
func (meac *MaintenanceEntryAttachmentCreate) Save(ctx context.Context) (*MaintenanceEntryAttachment, error) {
	meac.defaults()
	return withHooks(ctx, meac.sqlSave, meac.mutation, meac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (meac *MaintenanceEntryAttachmentCreate) SaveX(ctx context.Context) *MaintenanceEntryAttachment {
	v, err := meac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (meac *MaintenanceEntryAttachmentCreate) Exec(ctx context.Context) error {
	_, err := meac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (meac *MaintenanceEntryAttachmentCreate) ExecX(ctx context.Context) {
	if err := meac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (meac *MaintenanceEntryAttachmentCreate) defaults() {
	if _, ok := meac.mutation.UploadedAt(); !ok {
		v := maintenanceentryattachment.DefaultUploadedAt()
		meac.mutation.SetUploadedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (meac *MaintenanceEntryAttachmentCreate) check() error {
	if _, ok := meac.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "MaintenanceEntryAttachment.filename"`)}
	}
	if v, ok := meac.mutation.Filename(); ok {
		if err := maintenanceentryattachment.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "MaintenanceEntryAttachment.filename": %w`, err)}
		}
	}
	if _, ok := meac.mutation.Filepath(); !ok {
		return &ValidationError{Name: "filepath", err: errors.New(`ent: missing required field "MaintenanceEntryAttachment.filepath"`)}
	}
	if v, ok := meac.mutation.Filepath(); ok {
		if err := maintenanceentryattachment.FilepathValidator(v); err != nil {
			return &ValidationError{Name: "filepath", err: fmt.Errorf(`ent: validator failed for field "MaintenanceEntryAttachment.filepath": %w`, err)}
		}
	}
	if _, ok := meac.mutation.UploadedAt(); !ok {
		return &ValidationError{Name: "uploaded_at", err: errors.New(`ent: missing required field "MaintenanceEntryAttachment.uploaded_at"`)}
	}
	if len(meac.mutation.EntryIDs()) == 0 {
		return &ValidationError{Name: "entry", err: errors.New(`ent: missing required edge "MaintenanceEntryAttachment.entry"`)}
	}
	return nil
}

func (meac *MaintenanceEntryAttachmentCreate) sqlSave(ctx context.Context) (*MaintenanceEntryAttachment, error) {
	if err := meac.check(); err != nil {
		return nil, err
	}
	_node, _spec := meac.createSpec()
	if err := sqlgraph.CreateNode(ctx, meac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	meac.mutation.id = &_node.ID
	meac.mutation.done = true
	return _node, nil
}

func (meac *MaintenanceEntryAttachmentCreate) createSpec() (*MaintenanceEntryAttachment, *sqlgraph.CreateSpec) {
	var (
		_node = &MaintenanceEntryAttachment{config: meac.config}
		_spec = sqlgraph.NewCreateSpec(maintenanceentryattachment.Table, sqlgraph.NewFieldSpec(maintenanceentryattachment.FieldID, field.TypeInt))
	)
	if value, ok := meac.mutation.Filename(); ok {
		_spec.SetField(maintenanceentryattachment.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := meac.mutation.Filepath(); ok {
		_spec.SetField(maintenanceentryattachment.FieldFilepath, field.TypeString, value)
		_node.Filepath = value
	}
	if value, ok := meac.mutation.UploadedAt(); ok {
		_spec.SetField(maintenanceentryattachment.FieldUploadedAt, field.TypeTime, value)
		_node.UploadedAt = value
	}
	if nodes := meac.mutation.EntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   maintenanceentryattachment.EntryTable,
			Columns: []string{maintenanceentryattachment.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintenanceentry.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.maintenance_entry_attachments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MaintenanceEntryAttachmentCreateBulk is the builder for creating many MaintenanceEntryAttachment entities in bulk.
type MaintenanceEntryAttachmentCreateBulk struct {
	config
	err      error
	builders []*MaintenanceEntryAttachmentCreate
}

// Save creates the MaintenanceEntryAttachment entities in the database.
func (meacb *MaintenanceEntryAttachmentCreateBulk) Save(ctx context.Context) ([]*MaintenanceEntryAttachment, error) {
	if meacb.err != nil {
		return nil, meacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(meacb.builders))
	nodes := make([]*MaintenanceEntryAttachment, len(meacb.builders))
	mutators := make([]Mutator, len(meacb.builders))
	for i := range meacb.builders {
		func(i int, root context.Context) {
			builder := meacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MaintenanceEntryAttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, meacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, meacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, meacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (meacb *MaintenanceEntryAttachmentCreateBulk) SaveX(ctx context.Context) []*MaintenanceEntryAttachment {
	v, err := meacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (meacb *MaintenanceEntryAttachmentCreateBulk) Exec(ctx context.Context) error {
	_, err := meacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (meacb *MaintenanceEntryAttachmentCreateBulk) ExecX(ctx context.Context) {
	if err := meacb.Exec(ctx); err != nil {
		panic(err)
	}
}
