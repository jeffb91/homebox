// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/maintenanceentry"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/maintenanceentryattachment"
)

// MaintenanceEntryAttachment is the model entity for the MaintenanceEntryAttachment schema.
type MaintenanceEntryAttachment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// Filepath holds the value of the "filepath" field.
	Filepath string `json:"filepath,omitempty"`
	// UploadedAt holds the value of the "uploaded_at" field.
	UploadedAt time.Time `json:"uploaded_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MaintenanceEntryAttachmentQuery when eager-loading is set.
	Edges                         MaintenanceEntryAttachmentEdges `json:"edges"`
	maintenance_entry_attachments *uuid.UUID
	selectValues                  sql.SelectValues
}

// MaintenanceEntryAttachmentEdges holds the relations/edges for other nodes in the graph.
type MaintenanceEntryAttachmentEdges struct {
	// Entry holds the value of the entry edge.
	Entry *MaintenanceEntry `json:"entry,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EntryOrErr returns the Entry value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MaintenanceEntryAttachmentEdges) EntryOrErr() (*MaintenanceEntry, error) {
	if e.Entry != nil {
		return e.Entry, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: maintenanceentry.Label}
	}
	return nil, &NotLoadedError{edge: "entry"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MaintenanceEntryAttachment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case maintenanceentryattachment.FieldID:
			values[i] = new(sql.NullInt64)
		case maintenanceentryattachment.FieldFilename, maintenanceentryattachment.FieldFilepath:
			values[i] = new(sql.NullString)
		case maintenanceentryattachment.FieldUploadedAt:
			values[i] = new(sql.NullTime)
		case maintenanceentryattachment.ForeignKeys[0]: // maintenance_entry_attachments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MaintenanceEntryAttachment fields.
func (mea *MaintenanceEntryAttachment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case maintenanceentryattachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mea.ID = int(value.Int64)
		case maintenanceentryattachment.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				mea.Filename = value.String
			}
		case maintenanceentryattachment.FieldFilepath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filepath", values[i])
			} else if value.Valid {
				mea.Filepath = value.String
			}
		case maintenanceentryattachment.FieldUploadedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field uploaded_at", values[i])
			} else if value.Valid {
				mea.UploadedAt = value.Time
			}
		case maintenanceentryattachment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field maintenance_entry_attachments", values[i])
			} else if value.Valid {
				mea.maintenance_entry_attachments = new(uuid.UUID)
				*mea.maintenance_entry_attachments = *value.S.(*uuid.UUID)
			}
		default:
			mea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MaintenanceEntryAttachment.
// This includes values selected through modifiers, order, etc.
func (mea *MaintenanceEntryAttachment) Value(name string) (ent.Value, error) {
	return mea.selectValues.Get(name)
}

// QueryEntry queries the "entry" edge of the MaintenanceEntryAttachment entity.
func (mea *MaintenanceEntryAttachment) QueryEntry() *MaintenanceEntryQuery {
	return NewMaintenanceEntryAttachmentClient(mea.config).QueryEntry(mea)
}

// Update returns a builder for updating this MaintenanceEntryAttachment.
// Note that you need to call MaintenanceEntryAttachment.Unwrap() before calling this method if this MaintenanceEntryAttachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (mea *MaintenanceEntryAttachment) Update() *MaintenanceEntryAttachmentUpdateOne {
	return NewMaintenanceEntryAttachmentClient(mea.config).UpdateOne(mea)
}

// Unwrap unwraps the MaintenanceEntryAttachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mea *MaintenanceEntryAttachment) Unwrap() *MaintenanceEntryAttachment {
	_tx, ok := mea.config.driver.(*txDriver)
	if !ok {
		panic("ent: MaintenanceEntryAttachment is not a transactional entity")
	}
	mea.config.driver = _tx.drv
	return mea
}

// String implements the fmt.Stringer.
func (mea *MaintenanceEntryAttachment) String() string {
	var builder strings.Builder
	builder.WriteString("MaintenanceEntryAttachment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mea.ID))
	builder.WriteString("filename=")
	builder.WriteString(mea.Filename)
	builder.WriteString(", ")
	builder.WriteString("filepath=")
	builder.WriteString(mea.Filepath)
	builder.WriteString(", ")
	builder.WriteString("uploaded_at=")
	builder.WriteString(mea.UploadedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MaintenanceEntryAttachments is a parsable slice of MaintenanceEntryAttachment.
type MaintenanceEntryAttachments []*MaintenanceEntryAttachment
