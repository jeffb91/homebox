// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/maintenanceentry"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/maintenanceentryattachment"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/predicate"
)

// MaintenanceEntryAttachmentQuery is the builder for querying MaintenanceEntryAttachment entities.
type MaintenanceEntryAttachmentQuery struct {
	config
	ctx        *QueryContext
	order      []maintenanceentryattachment.OrderOption
	inters     []Interceptor
	predicates []predicate.MaintenanceEntryAttachment
	withEntry  *MaintenanceEntryQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MaintenanceEntryAttachmentQuery builder.
func (meaq *MaintenanceEntryAttachmentQuery) Where(ps ...predicate.MaintenanceEntryAttachment) *MaintenanceEntryAttachmentQuery {
	meaq.predicates = append(meaq.predicates, ps...)
	return meaq
}

// Limit the number of records to be returned by this query.
func (meaq *MaintenanceEntryAttachmentQuery) Limit(limit int) *MaintenanceEntryAttachmentQuery {
	meaq.ctx.Limit = &limit
	return meaq
}

// Offset to start from.
func (meaq *MaintenanceEntryAttachmentQuery) Offset(offset int) *MaintenanceEntryAttachmentQuery {
	meaq.ctx.Offset = &offset
	return meaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (meaq *MaintenanceEntryAttachmentQuery) Unique(unique bool) *MaintenanceEntryAttachmentQuery {
	meaq.ctx.Unique = &unique
	return meaq
}

// Order specifies how the records should be ordered.
func (meaq *MaintenanceEntryAttachmentQuery) Order(o ...maintenanceentryattachment.OrderOption) *MaintenanceEntryAttachmentQuery {
	meaq.order = append(meaq.order, o...)
	return meaq
}

// QueryEntry chains the current query on the "entry" edge.
func (meaq *MaintenanceEntryAttachmentQuery) QueryEntry() *MaintenanceEntryQuery {
	query := (&MaintenanceEntryClient{config: meaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := meaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := meaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(maintenanceentryattachment.Table, maintenanceentryattachment.FieldID, selector),
			sqlgraph.To(maintenanceentry.Table, maintenanceentry.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, maintenanceentryattachment.EntryTable, maintenanceentryattachment.EntryColumn),
		)
		fromU = sqlgraph.SetNeighbors(meaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MaintenanceEntryAttachment entity from the query.
// Returns a *NotFoundError when no MaintenanceEntryAttachment was found.
func (meaq *MaintenanceEntryAttachmentQuery) First(ctx context.Context) (*MaintenanceEntryAttachment, error) {
	nodes, err := meaq.Limit(1).All(setContextOp(ctx, meaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{maintenanceentryattachment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (meaq *MaintenanceEntryAttachmentQuery) FirstX(ctx context.Context) *MaintenanceEntryAttachment {
	node, err := meaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MaintenanceEntryAttachment ID from the query.
// Returns a *NotFoundError when no MaintenanceEntryAttachment ID was found.
func (meaq *MaintenanceEntryAttachmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = meaq.Limit(1).IDs(setContextOp(ctx, meaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{maintenanceentryattachment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (meaq *MaintenanceEntryAttachmentQuery) FirstIDX(ctx context.Context) int {
	id, err := meaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MaintenanceEntryAttachment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MaintenanceEntryAttachment entity is found.
// Returns a *NotFoundError when no MaintenanceEntryAttachment entities are found.
func (meaq *MaintenanceEntryAttachmentQuery) Only(ctx context.Context) (*MaintenanceEntryAttachment, error) {
	nodes, err := meaq.Limit(2).All(setContextOp(ctx, meaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{maintenanceentryattachment.Label}
	default:
		return nil, &NotSingularError{maintenanceentryattachment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (meaq *MaintenanceEntryAttachmentQuery) OnlyX(ctx context.Context) *MaintenanceEntryAttachment {
	node, err := meaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MaintenanceEntryAttachment ID in the query.
// Returns a *NotSingularError when more than one MaintenanceEntryAttachment ID is found.
// Returns a *NotFoundError when no entities are found.
func (meaq *MaintenanceEntryAttachmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = meaq.Limit(2).IDs(setContextOp(ctx, meaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{maintenanceentryattachment.Label}
	default:
		err = &NotSingularError{maintenanceentryattachment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (meaq *MaintenanceEntryAttachmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := meaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MaintenanceEntryAttachments.
func (meaq *MaintenanceEntryAttachmentQuery) All(ctx context.Context) ([]*MaintenanceEntryAttachment, error) {
	ctx = setContextOp(ctx, meaq.ctx, ent.OpQueryAll)
	if err := meaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MaintenanceEntryAttachment, *MaintenanceEntryAttachmentQuery]()
	return withInterceptors[[]*MaintenanceEntryAttachment](ctx, meaq, qr, meaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (meaq *MaintenanceEntryAttachmentQuery) AllX(ctx context.Context) []*MaintenanceEntryAttachment {
	nodes, err := meaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MaintenanceEntryAttachment IDs.
func (meaq *MaintenanceEntryAttachmentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if meaq.ctx.Unique == nil && meaq.path != nil {
		meaq.Unique(true)
	}
	ctx = setContextOp(ctx, meaq.ctx, ent.OpQueryIDs)
	if err = meaq.Select(maintenanceentryattachment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (meaq *MaintenanceEntryAttachmentQuery) IDsX(ctx context.Context) []int {
	ids, err := meaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (meaq *MaintenanceEntryAttachmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, meaq.ctx, ent.OpQueryCount)
	if err := meaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, meaq, querierCount[*MaintenanceEntryAttachmentQuery](), meaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (meaq *MaintenanceEntryAttachmentQuery) CountX(ctx context.Context) int {
	count, err := meaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (meaq *MaintenanceEntryAttachmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, meaq.ctx, ent.OpQueryExist)
	switch _, err := meaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (meaq *MaintenanceEntryAttachmentQuery) ExistX(ctx context.Context) bool {
	exist, err := meaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MaintenanceEntryAttachmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (meaq *MaintenanceEntryAttachmentQuery) Clone() *MaintenanceEntryAttachmentQuery {
	if meaq == nil {
		return nil
	}
	return &MaintenanceEntryAttachmentQuery{
		config:     meaq.config,
		ctx:        meaq.ctx.Clone(),
		order:      append([]maintenanceentryattachment.OrderOption{}, meaq.order...),
		inters:     append([]Interceptor{}, meaq.inters...),
		predicates: append([]predicate.MaintenanceEntryAttachment{}, meaq.predicates...),
		withEntry:  meaq.withEntry.Clone(),
		// clone intermediate query.
		sql:  meaq.sql.Clone(),
		path: meaq.path,
	}
}

// WithEntry tells the query-builder to eager-load the nodes that are connected to
// the "entry" edge. The optional arguments are used to configure the query builder of the edge.
func (meaq *MaintenanceEntryAttachmentQuery) WithEntry(opts ...func(*MaintenanceEntryQuery)) *MaintenanceEntryAttachmentQuery {
	query := (&MaintenanceEntryClient{config: meaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	meaq.withEntry = query
	return meaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Filename string `json:"filename,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MaintenanceEntryAttachment.Query().
//		GroupBy(maintenanceentryattachment.FieldFilename).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (meaq *MaintenanceEntryAttachmentQuery) GroupBy(field string, fields ...string) *MaintenanceEntryAttachmentGroupBy {
	meaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MaintenanceEntryAttachmentGroupBy{build: meaq}
	grbuild.flds = &meaq.ctx.Fields
	grbuild.label = maintenanceentryattachment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Filename string `json:"filename,omitempty"`
//	}
//
//	client.MaintenanceEntryAttachment.Query().
//		Select(maintenanceentryattachment.FieldFilename).
//		Scan(ctx, &v)
func (meaq *MaintenanceEntryAttachmentQuery) Select(fields ...string) *MaintenanceEntryAttachmentSelect {
	meaq.ctx.Fields = append(meaq.ctx.Fields, fields...)
	sbuild := &MaintenanceEntryAttachmentSelect{MaintenanceEntryAttachmentQuery: meaq}
	sbuild.label = maintenanceentryattachment.Label
	sbuild.flds, sbuild.scan = &meaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MaintenanceEntryAttachmentSelect configured with the given aggregations.
func (meaq *MaintenanceEntryAttachmentQuery) Aggregate(fns ...AggregateFunc) *MaintenanceEntryAttachmentSelect {
	return meaq.Select().Aggregate(fns...)
}

func (meaq *MaintenanceEntryAttachmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range meaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, meaq); err != nil {
				return err
			}
		}
	}
	for _, f := range meaq.ctx.Fields {
		if !maintenanceentryattachment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if meaq.path != nil {
		prev, err := meaq.path(ctx)
		if err != nil {
			return err
		}
		meaq.sql = prev
	}
	return nil
}

func (meaq *MaintenanceEntryAttachmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MaintenanceEntryAttachment, error) {
	var (
		nodes       = []*MaintenanceEntryAttachment{}
		withFKs     = meaq.withFKs
		_spec       = meaq.querySpec()
		loadedTypes = [1]bool{
			meaq.withEntry != nil,
		}
	)
	if meaq.withEntry != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, maintenanceentryattachment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MaintenanceEntryAttachment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MaintenanceEntryAttachment{config: meaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, meaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := meaq.withEntry; query != nil {
		if err := meaq.loadEntry(ctx, query, nodes, nil,
			func(n *MaintenanceEntryAttachment, e *MaintenanceEntry) { n.Edges.Entry = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (meaq *MaintenanceEntryAttachmentQuery) loadEntry(ctx context.Context, query *MaintenanceEntryQuery, nodes []*MaintenanceEntryAttachment, init func(*MaintenanceEntryAttachment), assign func(*MaintenanceEntryAttachment, *MaintenanceEntry)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*MaintenanceEntryAttachment)
	for i := range nodes {
		if nodes[i].maintenance_entry_attachments == nil {
			continue
		}
		fk := *nodes[i].maintenance_entry_attachments
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintenanceentry.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "maintenance_entry_attachments" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (meaq *MaintenanceEntryAttachmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := meaq.querySpec()
	_spec.Node.Columns = meaq.ctx.Fields
	if len(meaq.ctx.Fields) > 0 {
		_spec.Unique = meaq.ctx.Unique != nil && *meaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, meaq.driver, _spec)
}

func (meaq *MaintenanceEntryAttachmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(maintenanceentryattachment.Table, maintenanceentryattachment.Columns, sqlgraph.NewFieldSpec(maintenanceentryattachment.FieldID, field.TypeInt))
	_spec.From = meaq.sql
	if unique := meaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if meaq.path != nil {
		_spec.Unique = true
	}
	if fields := meaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, maintenanceentryattachment.FieldID)
		for i := range fields {
			if fields[i] != maintenanceentryattachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := meaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := meaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := meaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := meaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (meaq *MaintenanceEntryAttachmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(meaq.driver.Dialect())
	t1 := builder.Table(maintenanceentryattachment.Table)
	columns := meaq.ctx.Fields
	if len(columns) == 0 {
		columns = maintenanceentryattachment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if meaq.sql != nil {
		selector = meaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if meaq.ctx.Unique != nil && *meaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range meaq.predicates {
		p(selector)
	}
	for _, p := range meaq.order {
		p(selector)
	}
	if offset := meaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := meaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MaintenanceEntryAttachmentGroupBy is the group-by builder for MaintenanceEntryAttachment entities.
type MaintenanceEntryAttachmentGroupBy struct {
	selector
	build *MaintenanceEntryAttachmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (meagb *MaintenanceEntryAttachmentGroupBy) Aggregate(fns ...AggregateFunc) *MaintenanceEntryAttachmentGroupBy {
	meagb.fns = append(meagb.fns, fns...)
	return meagb
}

// Scan applies the selector query and scans the result into the given value.
func (meagb *MaintenanceEntryAttachmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, meagb.build.ctx, ent.OpQueryGroupBy)
	if err := meagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MaintenanceEntryAttachmentQuery, *MaintenanceEntryAttachmentGroupBy](ctx, meagb.build, meagb, meagb.build.inters, v)
}

func (meagb *MaintenanceEntryAttachmentGroupBy) sqlScan(ctx context.Context, root *MaintenanceEntryAttachmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(meagb.fns))
	for _, fn := range meagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*meagb.flds)+len(meagb.fns))
		for _, f := range *meagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*meagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := meagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MaintenanceEntryAttachmentSelect is the builder for selecting fields of MaintenanceEntryAttachment entities.
type MaintenanceEntryAttachmentSelect struct {
	*MaintenanceEntryAttachmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (meas *MaintenanceEntryAttachmentSelect) Aggregate(fns ...AggregateFunc) *MaintenanceEntryAttachmentSelect {
	meas.fns = append(meas.fns, fns...)
	return meas
}

// Scan applies the selector query and scans the result into the given value.
func (meas *MaintenanceEntryAttachmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, meas.ctx, ent.OpQuerySelect)
	if err := meas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MaintenanceEntryAttachmentQuery, *MaintenanceEntryAttachmentSelect](ctx, meas.MaintenanceEntryAttachmentQuery, meas, meas.inters, v)
}

func (meas *MaintenanceEntryAttachmentSelect) sqlScan(ctx context.Context, root *MaintenanceEntryAttachmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(meas.fns))
	for _, fn := range meas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*meas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := meas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
